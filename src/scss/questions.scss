@import "../../node_modules/bootstrap/scss/_variables.scss";
@import "../../node_modules/bootstrap/scss/mixins/_grid.scss";

// ISAAC
.question-panel > .content-value,
.question-panel .isaac-accordion .accordion-section > .content-value{
  background-color: white;
  box-shadow: 0 2px 30px 0 rgba(0, 0, 0, 0.08);
  margin: auto auto 2rem auto;
  padding: 3rem;
  @include media-breakpoint-down(sm) {
    padding: 1rem;
  }

  font-family: $secondary-font;
  font-size: 1.25rem;
  line-height: 1.6;
  font-weight: 600;
}

.unit-dropdown button {
  min-width: auto;
}

.question-component {
  margin-bottom: 2rem;

  .question-content {
    font-family: $secondary-font;
    font-size: 1.25rem;
    font-weight: 100;
    line-height: 1.6;
  }

  .custom-control-label {
    &:before, &:after {
      width: 1.5rem;
      height: 1.5rem;
      margin-top: -0.25rem;
    }
  }
}

.numeric-question .unit-selection {
  button.btn {
    min-width: auto !important;
  }
}

.symboliclogic-question {
  .eqn-editor-preview {
    border: solid 1px $black;
    padding: 0.15em 0.6em;
    font-size: 1.5rem;
    cursor: default;

    &.empty {
      color: $gray-500;
    }
  }
}

@include media-breakpoint-up(md) {
  .parsons-layout {
    @include make-col-offset(-2, 8);
    width: 150%;
  }
}

.parsons-question {
  .parsons-items {
    border: solid 1px #00000021;
    padding: 0 0.5em;

    &.empty {
      padding: 0.875em 0.5em;
    }

    .parsons-item > pre {
      margin: 0.5rem 0;
      padding: 0.5em 1em;
      cursor: grab; // Doesn't work?
    }

    // REMINDER: If you change the PARSONS_MAX_INDENT and PARSONS_INDENT_STEP
    // constants, you also have to change these two in here.
    $parsons-max-indent: 3;
    $parsons-step: 45;

    .parsons-item {
      @for $i from 1 through $parsons-max-indent {
        &.indent-#{$i} {
          margin-left: #{$i * $parsons-step}px;
        }
      }
    }

    &#parsons-choice-area {
      @for $i from 1 through $parsons-max-indent {
        &.ghost-indent-#{$i} {
          background: linear-gradient(to right,
            white #{$i * $parsons-step + 5}px, $gray-200 #{$i * $parsons-step + 5}px, $gray-200 #{$i * $parsons-step + 7}px, white #{$i * $parsons-step + 7}px
          );
        }
      }
    }
  }
}

.inequality-results {
  pre {
    white-space: pre-wrap;
  }
}

.quick-question {
  button {
      box-shadow: none !important; // How horrible...

      &:focus {
        text-decoration: underline;
      }

      &.active {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
    }
  }
  .alert {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }
}

.validation-response-panel {
  text-align: center;
  border-top: solid 1px $gray-107;
  border-bottom: solid 1px $gray-107;
  &.correct {
    background: $primary;
    color: black;
    margin-left: -3rem;
    margin-right: -3rem;
    margin-bottom: -3rem;
    @include media-breakpoint-down(sm) {
      margin-left: -1rem;
      margin-right: -1rem;
      margin-bottom: -1rem;
    }
  }
  p {
    margin-bottom: 0;
  }
}

.multichoice-option > .content-value {
  width: calc(100% - 1rem);
}

// NOMENSA question.scss
.question-component {
  background-color: white;
  box-shadow: 0 2px 30px 0 rgba(0, 0, 0, 0.08);
  padding: 1rem;
}
